class CubicSpline:
    def __init__(self, x_values, y_values):
        self.xData = x_values  # Значения x
        self.yData = y_values  # Значения y
        n = len(self.xData)  # Количество точек данных

        self.h = [self.xData[i + 1] - self.xData[i] for i in range(n - 1)]  # Разности между значениями x
        self.alpha = [0.0] * (n - 1)  # Список для хранения промежуточных значений alpha
        self.l = [0.0] * n  # Список для хранения промежуточных значений l
        self.u = [0.0] * (n - 1)  # Список для хранения промежуточных значений u
        self.z = [0.0] * n  # Список для хранения промежуточных значений z
        self.c = [0.0] * n  # Список для хранения коэффициентов c
        self.b = [0.0] * (n - 1)  # Список для хранения коэффициентов b
        self.d = [0.0] * (n - 1)  # Список для хранения коэффициентов d

        for i in range(1, n - 1):
            self.alpha[i] = 3.0 * ((self.yData[i + 1] - self.yData[i]) / self.h[i] - (self.yData[i] - self.yData[i - 1]) / self.h[i - 1])
        
        self.l[0] = 1.0
        self.u[0] = 0.0
        self.z[0] = 0.0

        for i in range(1, n - 1):
            self.l[i] = 2.0 * (self.xData[i + 1] - self.xData[i - 1]) - self.h[i - 1] * self.u[i - 1]
            self.u[i] = self.h[i] / self.l[i]
            self.z[i] = (self.alpha[i] - self.h[i - 1] * self.z[i - 1]) / self.l[i]

        self.l[n - 1] = 1.0
        self.z[n - 1] = 0.0
        self.c[n - 1] = 0.0

        for j in range(n - 2, -1, -1):
            self.c[j] = self.z[j] - self.u[j] * self.c[j + 1]
            self.b[j] = (self.yData[j + 1] - self.yData[j]) / self.h[j] - self.h[j] * (self.c[j + 1] + 2.0 * self.c[j]) / 3.0
            self.d[j] = (self.c[j + 1] - self.c[j]) / (3.0 * self.h[j])

    # Функция интерполяции
    def interpolate(self, x):
        n = len(self.xData)
        index = 0

        # Находим интервал для интерполяции
        for i in range(n - 1):
            if x >= self.xData[i] and x <= self.xData[i + 1]:
                index = i
                break

        delta_x = x - self.xData[index]
        interpolated_value = (
            self.yData[index]
            + self.b[index] * delta_x
            + self.c[index] * delta_x ** 2
            + self.d[index] * delta_x ** 3
        )

        return interpolated_value
В данном коде определен класс CubicSpline, который выполняет интерполяцию кубическим сплайном. Ниже приведены комментарии на русском языке для каждой части кода:

Метод __init__ инициализирует объект CubicSpline с заданными значениями x_values и y_values. Он вычисляет различные коэффициенты, необходимые для интерполяции.

Список h хранит разности между последовательными значениями x.

Список alpha вычисляет значения, используемые для решения системы линейных уравнений.

Списки l, u и z используются для хранения промежуточных значений в процессе решения системы линейных уравнений.

Списки c, b и d хранят коэффициенты интерполированного кубического сплайна.

Цикл for вычисляет значения alpha на основе заданных значений y_values и разностей между значениями x.

Первые элементы l, u и z инициализируются определенными значениями.

Цикл for вычисляет оставшиеся значения l, u и z, используя ранее вычисленные значения.

Последние элементы l, z и c устанавливаются определенными значениями.

Цикл for с обратным шагом вычисляет оставшиеся коэффициенты c, b и d методом обратной подстановки.

Метод interpolate принимает значение x в качестве входных данных и выполняет интерполяцию кубическим сплайном для нахождения соответствующего интерполированного значения.

Цикл for находит интервал (сегмент между двумя значениями x), в котором находится входное значение x.

delta_x - разница между входным значением x и меньшим значением x интервала.

Вычисление интерполированного значения с использованием коэффициентов b, c и d для данного интервала.

Возвращение интерполированного значения.